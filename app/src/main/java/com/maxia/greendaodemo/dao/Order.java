
package com.maxia.greendaodemo.dao;

import com.maxia.greendaodemo.dao.DaoSession;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.AbstractDao;
// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ORDERS".
 */
public class Order {

    private Long id;
    private java.util.Date date;
    private long customerId;
    private byte[] serializedCustomer;

    //denormalized properties
    private Customer customer2;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderDao myDao;

    private Customer customer;
    private Long customer__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Order() {
    }

    public Order(Long id) {
        this.id = id;
    }

    public Order(Long id, java.util.Date date, long customerId, byte[] serializedCustomer) {
        this.id = id;
        this.date = date;
        this.customerId = customerId;
        this.serializedCustomer = serializedCustomer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getCustomerId() {
        return customerId;
    }

    public void setCustomerId(long customerId) {
        this.customerId = customerId;
    }

    public byte[] getSerializedCustomer() {
        return serializedCustomer;
    }

    public void setSerializedCustomer(byte[] serializedCustomer) {
        this.serializedCustomer = serializedCustomer;
    }

    /** To-one relationship, resolved on first access. */
    public Customer getCustomer() {
        long __key = this.customerId;
        if (customer__resolvedKey == null || !customer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerDao targetDao = daoSession.getCustomerDao();
            Customer customerNew = targetDao.load(__key);
            synchronized (this) {
                customer = customerNew;
            	customer__resolvedKey = __key;
            }
        }
        return customer;
    }

    public void setCustomer(Customer customer) {
        if (customer == null) {
            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.customer = customer;
            customerId = customer.getId();
            customer__resolvedKey = customerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    public Customer getCustomer2() {
        if(customer2 == null && serializedCustomer != null) {
           customer2  = (Customer) de.greenrobot.dao.DbUtils.deserializeObject(serializedCustomer, Customer.class);
           serializedCustomer = null; //clear memory, before save, we'll re-serialize anyways if needed
        }
        return customer2;
    }

    public void setCustomer2(Customer customer2) {
        this.customer2 = customer2;
        serializedCustomer = null; //onBeforeSave will do serialization
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public void onBeforeSave() {
        //you can override this method and do some stuff if you want to :)
        if(customer2 != null) {//if property is nulled, its setter will already null the byte array.
            serializedCustomer = de.greenrobot.dao.DbUtils.serializeObject(customer2);
        }

    }
}
